<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Biologically Plausible Programming</title>
    <link>/</link>
    <description>Recent content on Biologically Plausible Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2022. All rights reserved.</copyright>
    <lastBuildDate>Sat, 05 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sequel to Pandas</title>
      <link>/05/03/2022/sql-to-python-pandas/</link>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/05/03/2022/sql-to-python-pandas/</guid>
      <description>One of the most important parts of the data analysis pipeline is the ability to collate data obtained from different sources. While the CSV file format remains the most popular form of data input, a lot of times production level data analysis requires that one fetch data from an internet source which in the simplest form may involve downloading a CSV file from a remote source. Often, however, the data fetch process requires interaction with a database which therefore necessitates that one have an understanding of relational databases and how to interact with them.</description>
    </item>
    
    <item>
      <title>Shiny Modals, Performance, Reactivity, and Observers.</title>
      <link>/12/12/2021/shiny-reactivity/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/12/12/2021/shiny-reactivity/</guid>
      <description>Since my last post almost five months ago, a lot has changed both in my personal and professional life. On a personal note, I finally moved to the beautiful and magical city of Prague, walked the famous Charles Bridge, enjoyed the clock show at the lovely Old Town Square, tried Czech dumplings, and enjoyed Kofola. Professionally, I have worked more with R&amp;rsquo;s shiny system as part of my job, learning a lot in the process.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/</guid>
      <description>Throughout his studies, Nelson has dedicated most of his free time to building software that can simplify life for students, researchers, and anyone interested in software. Listed below is a selection of projects he has worked on.
Python
 cytounet  The goal of cytounet is to provide an easy-to-use Keras based deep learning pipeline for image segmentation with particular focus on biological data. Nelson was inspired by and built upon ZhiXuHao&amp;rsquo;s unet implementation.</description>
    </item>
    
    <item>
      <title>Building User Interfaces with R&#39;s Shiny</title>
      <link>/19/07/2021/shiny-lessons/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/19/07/2021/shiny-lessons/</guid>
      <description>Update 22nd September 2021
The dashboard/app referred to in this blog post can now be tested and used in a browser by visiting https://nelson-gon.shinyapps.io/shinymde.
Introduction
Admittedly, it has been a long time since my last blog entry. Between that time, I have been working on a number of projects that I maintain over at my GitHub and more importantly, I was working on my final year thesis and finalizing my undergraduate studies.</description>
    </item>
    
    <item>
      <title>Growing big by building small.</title>
      <link>/17/03/2021/small-projects-not-so-small-lessons/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/17/03/2021/small-projects-not-so-small-lessons/</guid>
      <description>Why build when you can simply read?
The importance of learning as one builds has been echoed so many times in the open-source development world that another article on the same might seem not worth the time. However, our experiences are unique and offer a unique perspective even on topics that may have been read and written about countless times.
When a problem sparks an idea
A month or so ago, I was ready to submit updates to the R packages manymodelr and mde and thought the process would go just as smooth as it always does, if you ignore the usual issues with fixing tests and unidentified bugs that is.</description>
    </item>
    
    <item>
      <title>PyTorch Dataset Class: Simply Elegant</title>
      <link>/22/02/2021/pytorch-dataset-class-simply-elegant/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/22/02/2021/pytorch-dataset-class-simply-elegant/</guid>
      <description>Introduction
Over the past few weeks, I have been experimenting with and learning more about the popular PyTorch (torch) package that like Keras and Tensorflow, provides an easy way to implement deep learning algorithms. In this post, I show why I think torch&amp;rsquo;s Dataset class is an elegant and beginner-friendly way to handle the process of data processing. As I have written previously, it&amp;rsquo;s more important to ensure you have the correct data than actually implementing a target model.</description>
    </item>
    
    <item>
      <title>Hugo, Blogdown, and Github: What could go wrong?</title>
      <link>/25/12/2020/hugo-blogdown-pitfalls-to-avoid/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/25/12/2020/hugo-blogdown-pitfalls-to-avoid/</guid>
      <description>One of the most beautiful things about open source development is the idea that one picks up crucial skills like versioning be it via git* or any version control system of their choosing. For non developers, such versioning can be accomplished via syncing files to the cloud or manually uploading files each time. Alternatively, and in the most extreme scenario, one could simply version their files by simple file number incrementation: file_1_edit, file_1_edit_final, file_1_edit_final_final_finally.</description>
    </item>
    
    <item>
      <title>Open Source Software: The Case for Student Involvement</title>
      <link>/06/10/2020/open-source-student-involvement/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/06/10/2020/open-source-student-involvement/</guid>
      <description>Introduction
For over two years now, I have devoted most of my time to either building open source software or alerting developers of issues with &amp;ldquo;their&amp;rdquo; software. I use their in quotes because open source software really is community software and most developers have the community&amp;rsquo;s needs first.
During this time, I have grown a lot as a developer and believe that most of this growth has come from my involvement with developer communities be it over at StackOverflow or GitHub.</description>
    </item>
    
    <item>
      <title>Minimizing Loss: Lessons From a Summer of Deep Learning</title>
      <link>/14/09/2020/minimizing-loss-lessons-from-a-summer-of-deep-learning/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/14/09/2020/minimizing-loss-lessons-from-a-summer-of-deep-learning/</guid>
      <description>Introduction
While there is debate on how much similar deep learning(DL) operations are to the corresponding brain computations, these operations have been applied to several problems often generating excitement and sometimes unwarranted hype. Of all the DL applications, image processing has considerably matured and provided better results compared to traditional processes that relied on simple(r) kernel convolutions.
For the biomedical community, the UNet algorithm proposed by Ronneberger et al.(2015) has successfully been applied to several problems ranging from basic segmentation tasks to more complex tasks like cell tracking and cell cycle progress monitoring.</description>
    </item>
    
    <item>
      <title>R Loops for the Python Programmer</title>
      <link>/21/07/2020/r-loops-for-the-python-programmer/</link>
      <pubDate>Tue, 21 Jul 2020 23:35:25 +0800</pubDate>
      
      <guid>/21/07/2020/r-loops-for-the-python-programmer/</guid>
      <description>TLDR: Whenever possible use vectorised alternatives instead of loops, seq_along and 1:length will be handy when looping through data.
The R vs Python debate is one that has stood the test of time. Thousands of articles and tweets have been made that aim to argue for the use of one language over another. Fortunately for the reader, this post is not aimed at justifying the use of one language.
On the contrary, as someone who is fairly proficient in both languages, I thought it would be nice to write about key differences between loops in R and python.</description>
    </item>
    
    <item>
      <title>Creating a Hexagon sticker with R in Minutes</title>
      <link>/12/06/2020/hex-sticker-creation-r/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/12/06/2020/hex-sticker-creation-r/</guid>
      <description>I have recently released new versions of manymodelr and mde, R packages you may or may not have heard of.
One common feature of many R packages is a hexagon shaped sticker that often summarises the goals of the package and/or gives an idea of the developer’s philosophy. I am, as those who know me well might tell you, not the best of artists. I however, have always marveled at these beautiful stickers in others’ packages and wished to create one myself.</description>
    </item>
    
    <item>
      <title>Semi Automated Edge Detection with pyautocv</title>
      <link>/27/05/2020/semi-automated-edge-detection-with-pyautocv/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/27/05/2020/semi-automated-edge-detection-with-pyautocv/</guid>
      <description>In this short post, we take a look at how we can use pyautocv for edge detection. At the time of writing, pyautocv was at version 0.2.1 that was unreleased.
For installation details, please see the documentation of the project.
Pre-requisites
 Python &amp;gt;=3.6 pyautocv &amp;gt;=0.2.1 An image directory for which detection is required.  To begin, we import pyautocv&amp;rsquo;s Segmentation class.
from pyautocv.segmentation import * Next, we change directory to the target directory that holds our images.</description>
    </item>
    
    <item>
      <title>Contact the Author</title>
      <link>/contact/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/contact/</guid>
      <description>Send Email | Nelson-Gon on GitHub | NelsonGon on Kaggle | Follow NelsonGon</description>
    </item>
    
    <item>
      <title>Contact the Author</title>
      <link>/social/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/social/</guid>
      <description>Send Email | Nelson-Gon on GitHub | NelsonGon on Kaggle | Follow NelsonGon</description>
    </item>
    
    <item>
      <title>How to add a custom Kaggle Favicon to Hugo&#39;s Blackburn Theme</title>
      <link>/07/05/2020/how-to-add-a-custom-kaggle-favicon-to-hugo-s-blackburn-theme/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/07/05/2020/how-to-add-a-custom-kaggle-favicon-to-hugo-s-blackburn-theme/</guid>
      <description>In this short article, I show how I added a Kaggle favicon to the site.
Prerequisites:
R packages
  magrittr
  magick
  Why did I need to create a custom favicon?
I admittedly do not use Kaggle as much as I used to a year or so ago, mainly because I&amp;rsquo;ve found the site to be less enjoyable but that&amp;rsquo;s a post for another day.
The real reason for the need to create a custom icon was the desire to include Kaggle under the side bar.</description>
    </item>
    
    <item>
      <title>About the Author</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>Nelson Gonzabato (NelsonGon) holds a BSc (Hons) Integrative Biomedical Sciences from The University of Edinburgh and BSc Biomedical Sciences from Zhejiang University. He has built several open-source computational tools including cytounet, urlfix,pycite, mde, and manymodelr. A full list of these tools can be found at https://nelson-gon.github.io/projects and source code browsed at https://github.com/Nelson-Gon/.
Over the years, Nelson has also been an active member of the open source community, frequently contributing to the R tag on StackOverflow.</description>
    </item>
    
  </channel>
</rss>
