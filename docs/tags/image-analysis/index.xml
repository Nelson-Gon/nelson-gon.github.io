<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>image-analysis on Biologically Plausible Programming</title>
    <link>/tags/image-analysis/</link>
    <description>Recent content in image-analysis on Biologically Plausible Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2022. All rights reserved.</copyright>
    <lastBuildDate>Mon, 14 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/image-analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Minimizing Loss: Lessons From a Summer of Deep Learning</title>
      <link>/14/09/2020/minimizing-loss-lessons-from-a-summer-of-deep-learning/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/14/09/2020/minimizing-loss-lessons-from-a-summer-of-deep-learning/</guid>
      <description>Introduction
While there is debate on how much similar deep learning(DL) operations are to the corresponding brain computations, these operations have been applied to several problems often generating excitement and sometimes unwarranted hype. Of all the DL applications, image processing has considerably matured and provided better results compared to traditional processes that relied on simple(r) kernel convolutions.
For the biomedical community, the UNet algorithm proposed by Ronneberger et al.(2015) has successfully been applied to several problems ranging from basic segmentation tasks to more complex tasks like cell tracking and cell cycle progress monitoring.</description>
    </item>
    
    <item>
      <title>Semi Automated Edge Detection with pyautocv</title>
      <link>/27/05/2020/semi-automated-edge-detection-with-pyautocv/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/27/05/2020/semi-automated-edge-detection-with-pyautocv/</guid>
      <description>In this short post, we take a look at how we can use pyautocv for edge detection. At the time of writing, pyautocv was at version 0.2.1 that was unreleased.
For installation details, please see the documentation of the project.
Pre-requisites
Python &amp;gt;=3.6 pyautocv &amp;gt;=0.2.1 An image directory for which detection is required. To begin, we import pyautocv&amp;rsquo;s Segmentation class.
from pyautocv.segmentation import * Next, we change directory to the target directory that holds our images.</description>
    </item>
    
  </channel>
</rss>
