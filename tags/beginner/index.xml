<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>beginner on Biologically Plausible Programming</title>
    <link>/tags/beginner/</link>
    <description>Recent content in beginner on Biologically Plausible Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2020. All rights reserved.</copyright>
    <lastBuildDate>Mon, 14 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/beginner/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Minimizing loss: Lessons from a Summer of Deep Learning</title>
      <link>/14/09/2020/minimizing-loss-lessons-from-a-summer-of-deep-learning/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/14/09/2020/minimizing-loss-lessons-from-a-summer-of-deep-learning/</guid>
      <description>Introduction
While there is debate on how much similar deep learning(DL) operations are to the corresponding brain computaions, these operations have been applied to several problems often generating excitement and sometimes unwarranted hype. Of all the DL applications, image processing has considerably matured and provided better results compared to traditional processes that relied on &amp;ldquo;simple&amp;rdquo;(r) kernel convolutions.
For the biomedical community, the Unet algorithm proposed by Ronneberger et al.(2015) has succesfully been applied to several problems ranging from basic segmentation tasks to more complex tasks like cell tracking and cell cycle progress monitoring.</description>
    </item>
    
    <item>
      <title>R Loops for the Python Programmer</title>
      <link>/21/07/2020/r-loops-for-the-python-programmer/</link>
      <pubDate>Tue, 21 Jul 2020 23:35:25 +0800</pubDate>
      
      <guid>/21/07/2020/r-loops-for-the-python-programmer/</guid>
      <description>TLDR: Whenever possible use vectorised alternatives instead of loops, seq_along and 1:length will be handy when looping through data.
The R vs Python debate is one that has stood the test of time. Thousands of articles and tweets have been made that aim to argue for the use of one language over another. Fortunately for the reader, this post is not aimed at justifying the use of one language.
On the contrary, as someone who is fairly proficient in both languages, I thought it would be nice to write about key differences between loops in R and python.</description>
    </item>
    
  </channel>
</rss>