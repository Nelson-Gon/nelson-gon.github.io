do.call(data.frame,
Map(function(x) res$foods[[x]],target))
}
})
#' Method definitions for the FoodDetails Class
#' @param object An object of class FoodSearch
#' @param target-field Target field to extract, can be a vector. Defaults to "description"
#' @examples
#' \dontrun{
#' test_object <-make_object("FoodDetails",fdc_id = 504905)
#' get_food_details(test_object, "ingredients")
#' }
#' @export
setGeneric("get_food_details", function(object,...) standardGeneric("get_food_details"))
setMethod("get_food_details", signature = signature("FoodDetails"),
function(object, target_field = NULL){
res_response <- httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/",
object@fdc_id,"?api_key=", get_api_key()))
res_from_json <- jsonlite::fromJSON(httr::content(res_response,"text"))
res_from_json[target_field]
})
#' Get Nutrients given a FoodDetails Object
#' @inheritParams get_food_info
#' @return A `data.frame` object showing nutrients of a given food based on FDC ID.
#' @examples
#' \dontrun{
#' test_object <-make_object("FoodDetails",fdc_id = 504905)
#' head(get_nutrients(test_object))
#' }
#' @export
setGeneric("get_nutrients", function(object,...) standardGeneric("get_nutrients"))
setMethod("get_nutrients", signature = signature("FoodDetails"),
function(object,...){
get_food_details(object,target_field="foodNutrients")$foodNutrients$nutrient
})
my_object <- make_object("FoodSearch",search_phrase="corn")
get_food_info(my_object,"score")
httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/search/?api_key=",
get_api_key()),
query = list(query = my_object@search_phrase,
pageNumber=page_number,
sortBy=sort_field,
sortOrder = sort_direction,
brandOwner = my_object@brand_owner))
httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/search/?api_key=",
get_api_key()),
query = list(query = my_object@search_phrase,
pageNumber=2,
sortBy'publicationDate',
sortOrder = 'asc',
brandOwner = my_object@brand_owner))
httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/search/?api_key=",
get_api_key()),
query = list(query = my_object@search_phrase,
pageNumber=2,
sortBy'publicationDate',
sortOrder = 'asc',
brandOwner = my_object@brand_owner))
httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/search/?api_key=",
get_api_key()),
query = list(query = "chicken",
pageNumber=2,
sortBy'publicationDate',
sortOrder = 'asc',
brandOwner = NULL))
httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/search/?api_key=",
get_api_key()),
query = list(query = "chicken",
pageNumber=2,
sortBy = 'publicationDate',
sortOrder = 'asc',
brandOwner = NULL))
httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/search/?api_key=",
get_api_key()),
query = list(query = "chicken",
pageNumber=2,
sortBy = 'publicationDate',
sortOrder = 'asc',
brandOwner = NULL))
httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/search/?api_key=",
get_api_key()),
query = list(query = "chicken",
pageNumber=2,
sortBy = 'publshedDate',
sortOrder = 'asc',
brandOwner = NULL))
httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/search/?api_key=",
get_api_key()),
query = list(query = "chicken",
pageNumber=2,
sortBy = 'publishedDate',
sortOrder = 'asc',
brandOwner = NULL))
#' Method definitions for the FoodSearch Class
#' @param object An object of class FoodSearch
#' @param target Target field to extract, can be a vector. Defaults to "description"
#' @param page_number Page number of results to return. Defaults to 1
#' @param sort_field Character specifying what field to use for sorting. Defaults to publicationDate
#' @param sort_direction One of 'asc' or 'desc' to sort results in ascending or descending order respectively.
#' @examples
#' \dontrun{
#' my_object <- make_object("FoodSearch",search_phrase="indomie")
#' get_food_info(my_object,"description")
#' }
#' @export
setGeneric("get_food_info", function(object,...) standardGeneric("get_food_info"))
setMethod("get_food_info", signature("FoodSearch"),
function(object,target="description",
page_number=1,
sort_field="publishedDate",
sort_direction="asc"){
search_query_list =   list(query = object@search_phrase,
pageNumber=page_number,
sortBy=sort_field,
sortOrder = sort_direction,
brandOwner = object@brand_owner)
res_response<-httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/search/?api_key=",
get_api_key()),
query = search_query_list)
return(res_response)
res<-jsonlite::fromJSON(httr::content(res_response,"text"))
if(length(target) ==1){
res$foods[[target]]
}
else{
do.call(data.frame,
Map(function(x) res$foods[[x]],target))
}
})
#' Method definitions for the FoodDetails Class
#' @param object An object of class FoodSearch
#' @param target-field Target field to extract, can be a vector. Defaults to "description"
#' @examples
#' \dontrun{
#' test_object <-make_object("FoodDetails",fdc_id = 504905)
#' get_food_details(test_object, "ingredients")
#' }
#' @export
setGeneric("get_food_details", function(object,...) standardGeneric("get_food_details"))
setMethod("get_food_details", signature = signature("FoodDetails"),
function(object, target_field = NULL){
res_response <- httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/",
object@fdc_id,"?api_key=", get_api_key()))
res_from_json <- jsonlite::fromJSON(httr::content(res_response,"text"))
res_from_json[target_field]
})
#' Get Nutrients given a FoodDetails Object
#' @inheritParams get_food_info
#' @return A `data.frame` object showing nutrients of a given food based on FDC ID.
#' @examples
#' \dontrun{
#' test_object <-make_object("FoodDetails",fdc_id = 504905)
#' head(get_nutrients(test_object))
#' }
#' @export
setGeneric("get_nutrients", function(object,...) standardGeneric("get_nutrients"))
setMethod("get_nutrients", signature = signature("FoodDetails"),
function(object,...){
get_food_details(object,target_field="foodNutrients")$foodNutrients$nutrient
})
my_object <- make_object("FoodSearch",search_phrase="corn")
get_food_info(my_object,"score")
#' FoodSearch Class
#' @export
#' @slot search_phrase A phrase to use when querying the database
#' @slot brand_owner A character specifying who owns the brand e.g usa
setClass("FoodSearch",
representation = representation(search_phrase="character",
brand_owner="character"))
#' FoodDetails
#' @export
#' @slot fdc_id A food id whose details are required.
setClass("FoodDetails",
representation = representation(fdc_id = c("numeric")))
# This is too manual
# I will revisit this sometime later
# For now only use character as the repr
#setOldClass("FoodDetailsSingle")
#' FoodSearch Class
#' @export
#' @slot search_phrase A phrase to use when querying the database
setClass("FoodSearch",
representation = representation(search_phrase="character"))
#' FoodDetails
#' @export
#' @slot fdc_id A food id whose details are required.
setClass("FoodDetails",
representation = representation(fdc_id = c("numeric")))
# This is too manual
# I will revisit this sometime later
# For now only use character as the repr
#setOldClass("FoodDetailsSingle")
#' Method definitions for the FoodSearch Class
#' @param object An object of class FoodSearch
#' @param target Target field to extract, can be a vector. Defaults to "description"
#' @param page_number Page number of results to return. Defaults to 1
#' @param sort_field Character specifying what field to use for sorting. Defaults to publicationDate
#' @param sort_direction One of 'asc' or 'desc' to sort results in ascending or descending order respectively.
#' @examples
#' \dontrun{
#' my_object <- make_object("FoodSearch",search_phrase="indomie")
#' get_food_info(my_object,"description")
#' }
#' @export
setGeneric("get_food_info", function(object,...) standardGeneric("get_food_info"))
setMethod("get_food_info", signature("FoodSearch"),
function(object,target="description",
page_number=1,
sort_field="publishedDate",
sort_direction="asc",
brand_owner = NULL){
search_query_list =   list(query = object@search_phrase,
pageNumber=page_number,
sortBy=sort_field,
sortOrder = sort_direction,
brandOwner = brand_owner)
res_response<-httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/search/?api_key=",
get_api_key()),
query = search_query_list)
res<-jsonlite::fromJSON(httr::content(res_response,"text"))
if(length(target) ==1){
res$foods[[target]]
}
else{
do.call(data.frame,
Map(function(x) res$foods[[x]],target))
}
})
#' Method definitions for the FoodDetails Class
#' @param object An object of class FoodSearch
#' @param target-field Target field to extract, can be a vector. Defaults to "description"
#' @examples
#' \dontrun{
#' test_object <-make_object("FoodDetails",fdc_id = 504905)
#' get_food_details(test_object, "ingredients")
#' }
#' @export
setGeneric("get_food_details", function(object,...) standardGeneric("get_food_details"))
setMethod("get_food_details", signature = signature("FoodDetails"),
function(object, target_field = NULL){
res_response <- httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/",
object@fdc_id,"?api_key=", get_api_key()))
res_from_json <- jsonlite::fromJSON(httr::content(res_response,"text"))
res_from_json[target_field]
})
#' Get Nutrients given a FoodDetails Object
#' @inheritParams get_food_info
#' @return A `data.frame` object showing nutrients of a given food based on FDC ID.
#' @examples
#' \dontrun{
#' test_object <-make_object("FoodDetails",fdc_id = 504905)
#' head(get_nutrients(test_object))
#' }
#' @export
setGeneric("get_nutrients", function(object,...) standardGeneric("get_nutrients"))
setMethod("get_nutrients", signature = signature("FoodDetails"),
function(object,...){
get_food_details(object,target_field="foodNutrients")$foodNutrients$nutrient
})
my_object <- make_object("FoodSearch",search_phrase="corn")
get_food_info(my_object,"score")
get_food_info(my_object,c("description",'fdcId','score'))
get_food_info(my_object)
test<-httr::GET(paste0("https://api.nal.usda.gov/fdc/v1/search/?api_key=",
get_api_key()),
query = list(query = "chicken",
pageNumber=2,
sortBy = 'publishedDate',
sortOrder = 'asc',
brandOwner = NULL))
jsonlite::fromJSON(httr::content(test,"text"))
res2<-jsonlite::fromJSON(httr::content(test,"text"))
str(res2)
names(res2)
res2$foods
res2$foods[["score"]]
my_object <- make_object("FoodSearch",search_phrase="chicken")
get_food_info(my_object)
rm(list=ls())
load_all()
set_api_key("7zDO40pS8yjKkdwbauZXrr8GBFvWJ3UAgVVZjQQh")
my_object <- make_object("FoodSearch",search_phrase="chicken")
get_food_info(my_object,c("description",'fdcId','score'))
install()
setwd("..")
library(dplyr)
df <- read.table(text=" id   X_1   Y_1 number   X_2   Y_2
1     1     1     3      1     1     3
2     1     1     3      0     1     3
3     2     2     4      1     2     4
4     2     2     4      0     2     4
5     3     1     3      1     1     3
6     3     1     3      0     1     3", head =T)
df
df %>%
mutate(across(ends_with("_1"), ~replace(.,.==1,NA)))
across(ends_with("_2"), ~replace(.,.==0,NA))
df %>%
mutate(across(ends_with("_1"), ~replace(.,.==1,NA))) %>%
mutate(across(ends_with("_2"), ~replace(.,.==0,NA)))
structure(list(id = c(1, 2, 3, 4, 5, 6), X_1 = c(1, 1, 2, 2,
3, 3), Y_1 = c(1, 1, 2, 2, 1, 1), number = c(3, 3, 4, 4, 3, 3
), X_2 = c(1, 0, 1, 0, 1, 0), Y_2 = c(1, 1, 2, 2, 1, 1)), class = c("spec_tbl_df",
"tbl_df", "tbl", "data.frame"), row.names = c(NA, -6L), problems = structure(list(
row = 1:6, col = c(NA_integer_, NA_integer_, NA_integer_,
NA_integer_, NA_integer_, NA_integer_), expected = c("6 columns",
"6 columns", "6 columns", "6 columns", "6 columns", "6 columns"
), actual = c("7 columns", "7 columns", "7 columns", "7 columns",
"7 columns", "7 columns")), class = c("tbl_df", "tbl", "data.frame"
), row.names = c(NA, -6L)), spec = structure(list(cols = list(
id = structure(list(), class = c("collector_double", "collector"
)), X_1 = structure(list(), class = c("collector_double",
"collector")), Y_1 = structure(list(), class = c("collector_double",
"collector")), number = structure(list(), class = c("collector_double",
"collector")), X_2 = structure(list(), class = c("collector_double",
"collector")), Y_2 = structure(list(), class = c("collector_double",
"collector"))), default = structure(list(), class = c("collector_guess",
"collector")), skip = 1), class = "col_spec"))
df1 <-  tibble::tribble(
~id, ~X_1, ~Y_1, ~number, ~X_2, ~Y_2,
1L,   1L,   3L,      1L,   1L,   3L,
1L,   1L,   3L,      0L,   1L,   3L,
2L,   2L,   4L,      1L,   2L,   4L,
2L,   2L,   4L,      0L,   2L,   4L,
3L,   1L,   3L,      1L,   1L,   3L,
3L,   1L,   3L,      0L,   1L,   3L
)
df1 %>%
mutate(across(ends_with("_1"), ~replace(.,.==1,NA))) %>%
mutate(across(ends_with("_2"), ~replace(.,.==0,NA)))
df1
df <- read.table(text="id v1 v2 v3 wei
1  NA NA NA  1
2  1  1  2   2
3  1  1  NA  1
4  1  1  1   3", head= T)
df
library(dplyr)
df
df %>%
group_by(id) %>%
mutate(wei = is.na(v1:v3))
df %>%
mutate(wei = is.na(v1:v3))
df %>%
mutate(across(v1:v3, ~ ifelse(is.na(.), wei=0,.)))
df %>%
mutate(across(v1:v3, ~ ifelse(is.na(.), 0,.)))
library(tidyr)
df %>%
pivot_longer(cols = v1:v3)
df %>%
pivot_longer(cols = -1)
df
df %>%
mutate(wei = ifelse(is.na(rowSums(.[-c(1,4)])),0,.))
df %>%
mutate(wei = ifelse(is.na(rowSums(.[-c(1,4)])),0,wei))
dput(df)
columns <- grep("v1|id", names(df))
df %>%
mutate(wei = ifelse(is.na(rowSums(.[-columns])),0,wei))
df %>%
mutate(wei = ifelse(all(is.na(rowSums(.[-columns]))),0,wei))
df %>%
mutate(wei = ifelse(all(is.na(.[-columns])),0,wei))
df %>%
rowwise() %>%
mutate(wei = ifelse(all(is.na(.[-columns])),0,wei))
df %>%
mutate(wei = ifelse(all(is.na(.[-columns])),0,wei))
df
is.na(df[-columns])
columns <- grep("v|id", names(df))
df %>%
mutate(wei = ifelse(all(is.na(.[-columns])),0,wei))
columns <- grep("v|id|wei", names(df))
df %>%
mutate(wei = ifelse(all(is.na(.[-columns])),0,wei))
columns <- grep("v|id", names(df))
df %>%
mutate(wei = ifelse(all(is.na(.[-columns])),0,wei))
df
apply(df[-columns],1,all,is.na)
apply(df[-columns],1,funcion(x) all(is.na(x)))
apply(df[-columns],1,function(x) all(is.na(x)))
columns <- grep("v|id|wei", names(df))
apply(df[-columns],1,function(x) all(is.na(x)))
columns <- grep("v|id", names(df))
df
df %>%
mutate(wei = ifelse(all(is.na(.[-columns])),0,wei))
df %>%
mutate(wei = ifelse(rowSums(is.na(.[-columns]))==0,0,wei))
rowSums(df[-columns])
df[-columns]
df[columns]
rowSums(df[columns])
rowSums(as.numeric(df[columns]))
rowSums(df[columns])
df
df[columns]
columns <- grep("^v", names(df))
df[columns]
df[columns] %>%
rowwise() %>%
mutate(sum(as.numeric(.)))
df[columns] %>%
rowwise() %>%
mutate(across(everything(), ~sum(as.numeric(.))))
df[columns] %>%
rowwise() %>%
mutate(Sum=across(everything(), ~sum(as.numeric(.))))
df[columns] %>%
mutate(Sum=across(everything(), ~sum(as.numeric(.))))
df[columns]
rowSums(df[columns])
apply(df[columns],1, function(x) all(is.na(x)))
df %>%
mutate(wei = ifelse(apply(df[columns],1, function(x) all(is.na(x))),0,wei))
columns <- grep("^v", names(df))
df %>%
mutate(wei = ifelse(apply(df[columns],1, function(x) all(is.na(x))),0,wei))
df %>%
rowwise()
df %>%
rowwise() %>%
mutate(across(starts_with("v"), ~all(is.na(.))))
df %>%
)mutate(wei = ifelse(apply(df[columns],1, function(x) all(is.na(x))),0,wei))
df %>%
mutate(wei = ifelse(apply(df[columns],1, function(x) all(is.na(x))),0,wei))
apply(df[columns],1, function(x) all(is.na(x))
apply(df[columns],1, function(x) all(is.na(x)))
df %>%
pivot_longer(v1:v3)
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id)
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(value)), 0, wei))
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(value)), 0, wei)) %>%
ungroup()
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(value)), 0, wei)) %>%
ungroup() %>%
pivot_wider(name,value)
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(value)), 0, wei)) %>%
ungroup() %>%
pivot_wider(wei,value)
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(value)), 0, wei)) %>%
ungroup() %>%
pivot_wider(wei,id)
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(value)), 0, wei)) %>%
ungroup() %>%
pivot_wider(names,value)
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(value)), 0, wei)) %>%
ungroup() %>%
pivot_wider(name,value)
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(value)), 0, wei)) %>%
ungroup() %>%
pivot_wider(c(name,id),value)
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(value)), 0, wei)) %>%
ungroup() %>%
pivot_wider(id,value)
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(value)), 0, wei)) %>%
ungroup() %>%
pivot_wider(name,value)
df %>%
pivot_longer(v1:v3)
df %>%
pivot_longer(v1:v3) %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(value)), 0, wei))
df %>%
group_by(name,id) %>%
mutate(wei = ifelse(all(is.na(.data[-group_indices()])), 0, wei))
setwd("mysite")
blogdown::serve_site()
blogdown::stop_server()
setwd("..")
setwd("mysite")
blogdown::serve_site()
blogdown::serve_site()
