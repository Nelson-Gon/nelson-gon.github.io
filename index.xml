<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Zero to Hero Programmer Pathway</title>
    <link>/</link>
    <description>Recent content on A Zero to Hero Programmer Pathway</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2020. All rights reserved.</copyright>
    <lastBuildDate>Wed, 08 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>manymodelr: Build and Tune Several Models</title>
      <link>/18/07/2020/manymodelr-build-and-tune-several-models/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/18/07/2020/manymodelr-build-and-tune-several-models/</guid>
      <description>manymodelr: Build and Tune Several ModelsIn this vignette, we take a look at how we can simplify many machine learning tasks using manymodelr. We will take a look at the core functions first.
Installing the package
install.packages(&amp;quot;manymodelr&amp;quot;)Once the package has been successfully installed, we can then proceed by loading the package and exploring some of the key functions.
Loading the package
library(manymodelr)#&amp;gt; Loading required package: caret#&amp;gt; Loading required package: lattice#&amp;gt; Loading required package: ggplot2#&amp;gt; Loading required package: Metrics#&amp;gt; #&amp;gt; Attaching package: &amp;#39;Metrics&amp;#39;#&amp;gt; The following objects are masked from &amp;#39;package:caret&amp;#39;:#&amp;gt; #&amp;gt; precision, recall#&amp;gt; Loading required package: e1071#&amp;gt; Welcome to manymodelr.</description>
    </item>
    
    <item>
      <title>Missing Data Explorer</title>
      <link>/18/07/2020/missing-data-explorer/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/18/07/2020/missing-data-explorer/</guid>
      <description>This is the development version of mde. The acronym mde stands for Missing Data Explorer, a package that is intended to make missing data exploration as smooth and easy as possible.
The goal of mde is to ease exploration of missingness without feeling overwhelmed by syntax with particular focus on simplicity.
Installation
CRAN releaseinstall.packages(&amp;quot;mde&amp;quot;)Stable Development version# install.packages(&amp;quot;devtools&amp;quot;)devtools::install_github(&amp;quot;Nelson-Gon/mde&amp;quot;)# build vignettesdevtools::install_github(&amp;quot;Nelson-Gon/mde&amp;quot;, build_vignettes=TRUE)Unstable Development versiondevtools::install_github(&amp;quot;Nelson-Gon/mde@develop&amp;quot;)Loading the package</description>
    </item>
    
    <item>
      <title>pyfdc: A python interface to FoodDataCentral</title>
      <link>/18/07/2020/pyfdc-a-python-interface-to-fooddatacentral/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/18/07/2020/pyfdc-a-python-interface-to-fooddatacentral/</guid>
      <description>pyfdc: A python interface to FoodDataCentral
Installation
The simplest way to install the latest release is as follows:
pip install pyfdcTo install the development version:
Open the Terminal/CMD/Git bash/shell and enter
pip install git+https://github.com/Nelson-Gon/pyfdc.git# or for the less stable dev versionpip install git+https://github.com/Nelson-Gon/pyfdc.git@developOtherwise:
# clone the repogit clone https://www.github.com/Nelson-Gon/pyfdc.gitcd pyfdcpython3 setup.py installBuilding documentation
# The Makefile here is Windows specificcd docspython -m m2r .</description>
    </item>
    
    <item>
      <title>Semi Automated Image Processing with pyautocv</title>
      <link>/18/07/2020/semi-automated-image-processing-with-pyautocv/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/18/07/2020/semi-automated-image-processing-with-pyautocv/</guid>
      <description>In this short post, we take a look at how we can use pyautocv for edge detection. At the time of writing, pyautocv was at version 0.2.1 that was unreleased.
For installation details, please see the documentation of the project.
Pre-requisites
Python &amp;gt;=3.6pyautocvAn image directory for which detection is required.To begin, we import pyautocv’s Segmentation class.
from pyautocv.segmentation import *Next, we change directory to the target directory that holds our images.</description>
    </item>
    
    <item>
      <title>About the Author</title>
      <link>/about/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>Nelson Gonzabato, known online as NelsonGon, is currently a third year Biomedical Sciences student at the ZJU-UoE Institute. Over the duration of his degree, Nelson has developed interest in neuroscience and pharmacology and how computational tools could aid research in these areas, recently being fascinated by mixed effects models. He is currently exploring deep learning based approaches to biological image processing.
Outside class, Nelson continually seeks ways of advancing his programming skills and knowledge.</description>
    </item>
    
    <item>
      <title>Creating a Hexagon Sticker with R in Minutes</title>
      <link>/12/06/2020/creating-a-hexagon-sticker-with-r-in-minutes/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/12/06/2020/creating-a-hexagon-sticker-with-r-in-minutes/</guid>
      <description>I have recently released new versions of manymodelr and mde, R packages you may or may not have heard of.
One common feature of many R packages is a hexagon shaped sticker that often summarises the goals of the package and/or gives an idea of the developer’s philosophy. I am, as those who know me well might tell you, not the best of artists. I however, have always marveled at these beautiful stickers in others’ packages and wished to create one myself.</description>
    </item>
    
    <item>
      <title>Contact the Author</title>
      <link>/social/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/social/</guid>
      <description>To contact Nelson, please click on the icons above(for example Twitter). For further convenience, they are relisted here:
Send Email | Nelson-Gon on GitHub | NelsonGon on Kaggle | Follow NelsonGon</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/projects/</guid>
      <description>Throughout his studies, Nelson has dedicated most of his free time to building software that can simplify life for students, researchers, and anyone interested in software. Listed below is a selection of projects he has worked on.
 manymodelr  manymodelr is an R package focused on reducing the time spent in performing common machine learning tasks. Nelson started developing it after observing that most of what he was doing was repetitive.</description>
    </item>
    
    <item>
      <title>How to add a custom Kaggle Favicon to Hugo&#39;s Blackburn Theme</title>
      <link>/07/05/2020/how-to-add-a-custom-kaggle-favicon-to-hugo-s-blackburn-theme/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/07/05/2020/how-to-add-a-custom-kaggle-favicon-to-hugo-s-blackburn-theme/</guid>
      <description>In this short article, I show how I added a Kaggle favicon to the site.
Prerequisites:
R packages
  magrittr
  magick
  Why did I need to create a custom favicon?
I admittedly do not use Kaggle as much as I used to a year or so ago, mainly because I&amp;rsquo;ve found the site to be less enjoyable but that&amp;rsquo;s a post for another day.
The real reason for the need to create a custom icon was the desire to include Kaggle under the side bar.</description>
    </item>
    
  </channel>
</rss>