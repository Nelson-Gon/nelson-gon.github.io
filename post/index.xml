<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Biologically Plausible Programming</title>
    <link>/post/</link>
    <description>Recent content in Posts on Biologically Plausible Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2020. All rights reserved.</copyright>
    <lastBuildDate>Mon, 14 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Minimizing loss: Lessons from a Summer of Deep Learning</title>
      <link>/14/09/2020/minimizing-loss-lessons-from-a-summer-of-deep-learning/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/14/09/2020/minimizing-loss-lessons-from-a-summer-of-deep-learning/</guid>
      <description>Introduction
While there is debate on how much similar deep learning(DL) operations are to the corresponding brain computations, these operations have been applied to several problems often generating excitement and sometimes unwarranted hype. Of all the DL applications, image processing has considerably matured and provided better results compared to traditional processes that relied on &amp;ldquo;simple&amp;rdquo;(r) kernel convolutions.
For the biomedical community, the UNet algorithm proposed by Ronneberger et al.(2015) has successfully been applied to several problems ranging from basic segmentation tasks to more complex tasks like cell tracking and cell cycle progress monitoring.</description>
    </item>
    
    <item>
      <title>R Loops for the Python Programmer</title>
      <link>/21/07/2020/r-loops-for-the-python-programmer/</link>
      <pubDate>Tue, 21 Jul 2020 23:35:25 +0800</pubDate>
      
      <guid>/21/07/2020/r-loops-for-the-python-programmer/</guid>
      <description>TLDR: Whenever possible use vectorised alternatives instead of loops, seq_along and 1:length will be handy when looping through data.
The R vs Python debate is one that has stood the test of time. Thousands of articles and tweets have been made that aim to argue for the use of one language over another. Fortunately for the reader, this post is not aimed at justifying the use of one language.
On the contrary, as someone who is fairly proficient in both languages, I thought it would be nice to write about key differences between loops in R and python.</description>
    </item>
    
    <item>
      <title>Creating a Hexagon Sticker with R in Minutes</title>
      <link>/12/06/2020/creating-a-hexagon-sticker-with-r-in-minutes/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/12/06/2020/creating-a-hexagon-sticker-with-r-in-minutes/</guid>
      <description>I have recently released new versions of manymodelr and mde, R packages you may or may not have heard of.
One common feature of many R packages is a hexagon shaped sticker that often summarises the goals of the package and/or gives an idea of the developer’s philosophy. I am, as those who know me well might tell you, not the best of artists. I however, have always marveled at these beautiful stickers in others’ packages and wished to create one myself.</description>
    </item>
    
    <item>
      <title>Semi Automated Image Processing with pyautocv</title>
      <link>/20/05/2020/semi-automated-image-processing-with-pyautocv/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/20/05/2020/semi-automated-image-processing-with-pyautocv/</guid>
      <description>In this short post, we take a look at how we can use pyautocv for edge detection. At the time of writing, pyautocv was at version 0.2.1 that was unreleased.
For installation details, please see the documentation of the project.
Pre-requisites
Python &amp;gt;=3.6pyautocvAn image directory for which detection is required.To begin, we import pyautocv’s Segmentation class.
from pyautocv.segmentation import *Next, we change directory to the target directory that holds our images.</description>
    </item>
    
    <item>
      <title>How to add a custom Kaggle Favicon to Hugo&#39;s Blackburn Theme</title>
      <link>/07/05/2020/how-to-add-a-custom-kaggle-favicon-to-hugo-s-blackburn-theme/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/07/05/2020/how-to-add-a-custom-kaggle-favicon-to-hugo-s-blackburn-theme/</guid>
      <description>In this short article, I show how I added a Kaggle favicon to the site.
Prerequisites:
R packages
  magrittr
  magick
  Why did I need to create a custom favicon?
I admittedly do not use Kaggle as much as I used to a year or so ago, mainly because I&amp;rsquo;ve found the site to be less enjoyable but that&amp;rsquo;s a post for another day.
The real reason for the need to create a custom icon was the desire to include Kaggle under the side bar.</description>
    </item>
    
  </channel>
</rss>